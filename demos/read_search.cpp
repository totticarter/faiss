#include <string>
#include <iostream>
#include "../index_io.h"
#include "../AuxIndexStructures.h"
#include <fstream>
#include <unistd.h>
#include <time.h>
#include <sys/time.h>

using namespace std;


double get_wall_time()
{
    struct timeval time ;
    if (gettimeofday(&time,NULL)){
        return 0;
    }
    return (double)time.tv_sec + (double)time.tv_usec * .000001;
}
int main(){

    //1.error
    //faiss::Index* index = faiss::read_index("/Users/liyong/software/pythoncode/com/tencent/cubeli/ml/faiss/benchdata/indexdata/ivfip.index", true);
    //2.error
    //faiss::Index* index = faiss::read_index("/Users/liyong/software/pythoncode/com/tencent/cubeli/ml/faiss/benchdata/indexdata/ivfip.index", 0);

    //faiss::Index* index = faiss::read_index("/tmp/indexfile", 0);

    //3.successed
    //faiss::Index* index = faiss::read_index("/tmp/index_trained.faissindex", 0);

//    float feature[] = {0.936365f, 0.898588f, 0.10071f, 0.0549328f, 0.313337f, 0.580289f, 0.95195f, 0.846651f, 0.587664f, 0.602433f, 0.64126f, 0.665102f, 0.700409f, 0.473435f, 0.762783f, 0.94659f, 0.966942f, 0.787101f, 0.66557f, 0.615079f, 0.40839f, 0.313374f, 0.493341f, 0.0540428f, 0.968261f, 0.723869f, 0.165471f, 0.371421f, 0.837873f, 0.786029f, 0.804175f, 0.660694f, 0.0945434f, 0.0547852f, 0.624905f, 0.665777f, 0.532396f, 0.0766366f, 0.640171f, 0.181401f, 0.488967f, 0.539892f, 0.115855f, 0.532138f, 0.771321f, 0.313436f, 0.701298f, 0.0808686f, 0.421226f, 0.837835f, 0.62088f, 0.320922f, 0.066153f, 0.305264f, 0.559352f, 0.245132f, 0.345752f, 0.692696f, 0.642956f, 0.290532f, 0.324351f, 0.215901f, 0.663523f, 0.80051f, 0.669516f, 0.635224f, 0.816645f, 0.0888933f, 0.543348f, 0.0689961f, 0.334055f, 0.435243f, 0.79375f, 0.32327f, 0.544171f, 0.680693f, 0.902354f, 0.00963884f, 0.855966f, 0.162793f, 0.826971f, 0.944038f, 0.645827f, 0.0504053f, 0.0306636f, 0.0620928f, 0.953756f, 0.380867f, 0.605938f, 0.679917f, 0.63619f, 0.316887f, 0.0485635f, 0.717966f, 0.253196f, 0.0264608f, 0.306663f, 0.0999606f, 0.515932f, 0.732231f, 0.700579f, 0.0650424f, 0.817763f, 0.604805f, 0.979384f, 0.480733f, 0.903624f, 0.405727f, 0.530671f, 0.324247f, 0.484968f, 0.878851f, 0.799386f, 0.48304f, 0.922697f, 0.493188f, 0.585132f, 0.600668f, 0.52177f, 0.046002f, 0.689844f, 0.31521f, 0.505844f, 0.0225802f, 0.571311f, 0.374324f, 0.0684754f, 0.300052f, 0.243342f, 0.498916f, 0.682428f, 0.488799f, 0.748937f, 0.757288f, 0.94695f, 0.778866f, 0.545496f, 0.620126f, 0.974068f, 0.843588f, 0.0856805f, 0.826072f, 0.671678f, 0.0321027f, 0.587115f, 0.995656f, 0.239348f, 0.531036f, 0.369734f, 0.401582f, 0.921147f, 0.308325f, 0.440586f, 0.0148566f, 0.180727f, 0.774727f, 0.0395841f, 0.493743f, 0.302227f, 0.15714f, 0.271687f, 0.0263469f, 0.254982f, 0.409547f, 0.464749f, 0.253826f, 0.971666f, 0.0695391f, 0.559771f, 0.0312967f, 0.913139f, 0.169311f, 0.291184f, 0.684756f, 0.566513f, 0.138401f, 0.607301f, 0.117617f, 0.936631f, 0.490782f, 0.251148f, 0.548153f, 0.93922f, 0.011169f, 0.53394f, 0.523516f, 0.133523f, 0.575334f, 0.529732f, 0.876585f, 0.393388f, 0.727983f, 0.470937f, 0.454228f, 0.811936f, 0.661408f, 0.378873f, 0.250482f, 0.472546f, 0.391107f};
    float feature[] = {-0.0339736f, -0.0746186f, 0.0083736f, -0.0586673f, 0.00741589f, 0.011623f, 0.0623671f, 0.0974994f, -0.00193957f, 0.106425f, 0.0619975f, -0.0706475f, -0.0701948f, 0.0206853f, -0.0786209f, -0.00653881f, -0.0313807f, -0.0567374f, 0.0115499f, 0.0967452f, 0.12107f, 0.0731379f, -0.0607179f, 0.069753f, -0.0673748f, 0.0121373f, 0.0671491f, 0.0380954f, 0.0181432f, 0.0533982f, 0.0104262f, -0.120834f, 0.120956f, -0.0139762f, 0.0241658f, -0.0306743f, 0.107688f, 0.0196775f, -0.0883931f, 0.0341134f, -0.046184f, -0.0885944f, 0.104806f, -0.0198912f, 0.0843555f, 0.0267812f, 0.11243f, 0.00263769f, 0.0741055f, -0.0865901f, 0.037914f, -0.111129f, -0.121298f, -0.117757f, -0.0654883f, -0.0585883f, 0.11888f, 0.119579f, -0.0915858f, 0.0443025f, 0.0975925f, -0.0641163f, 0.0799803f, -0.0146479f, -0.0636039f, 0.0878603f, 0.092502f, -0.0879257f, 0.00258602f, 0.0561575f, 0.109283f, 0.0562833f, 0.0815238f, 0.00542666f, -0.0853749f, -0.0483468f, 0.0985475f, -0.0259185f, -0.0174989f, -0.0423129f, 0.0789322f, -0.0441442f, 0.0740347f, -0.0972519f, -0.065638f, 0.0894881f, -0.114717f, 0.00815367f, -0.0694671f, -0.106324f, 0.110722f, -0.0518932f, -0.0558122f, -0.0972002f, -0.114818f, -0.112714f, 0.0153056f, 0.111923f, 0.0723296f, -0.0155403f, -0.00323333f, 0.105247f, -0.0314993f, 0.014108f, 0.0269604f, 0.0140014f, 0.0841644f, -0.0530161f, 0.0566237f, 0.0632304f, -0.0715506f, -0.0155918f, 0.00797787f, 0.0554529f, -0.011955f, 0.0340033f, 0.0111393f, -0.102787f, 0.0422438f, 0.111263f, -0.064648f, 0.0970489f, -0.0230879f, -0.0730029f, -0.0543867f, 0.0278068f, 0.0442933f, 0.0685364f, 0.09382f, 0.0598213f, 0.0870015f, 0.0670124f, -0.0309686f, -0.0645854f, -0.0908305f, 0.0429539f, -0.0525354f, 0.00581036f, 0.109706f, -0.0450133f, 0.0909769f, 0.064823f, -0.117853f, -0.0275143f, 0.118178f, -0.0030048f, 0.102375f, 0.0139373f, -0.110423f, 0.0154136f, -0.0461972f, -0.0188975f, 0.10084f, 0.0733045f, 0.0593666f, 0.097195f, 0.0758197f, -0.0883415f, -0.0752974f, 0.120765f, -0.0706149f, -0.0633325f, 0.108424f, -0.0788381f, -0.106111f, 0.0858146f, -0.073162f, 0.0797086f, -0.0315152f, -0.0429289f, -0.0576018f, 0.0674467f, -0.0397499f, 0.00237063f, -0.0176477f, -0.105638f, -0.0539208f, -0.0307466f, -0.0644939f, -0.107603f, 0.0141444f, -0.0290765f, 0.0474669f, 0.0853663f, -0.104857f, -0.0801834f, 0.0222852f, -0.0246418f, 0.0680479f, -0.0691468f, 0.0583833f, 0.0815922f, -0.0700098f, 0.0758754f, -0.0614074f, 0.0845511f, 0.0105194f, -0.08892f, -0.0346567f, -0.021639f};
    //faiss::Index* index = faiss::read_index("/tmp/faiss_ivf_ip.index");
    //faiss::Index* index = faiss::read_index("/tmp/faiss_ivf_l2.index");
//    faiss::Index* index = faiss::read_index("/tmp/faiss_ivfpq_l2.index");
    faiss::Index* index = faiss::read_index("/Users/liyong/software/vectorindex/Ann-train/data/securitydb/userface/part0/20181101/ivfl2_index.data");
    cout << "trained: " << index->is_trained << ", d is: " << index->d << ", n is: " << index->ntotal << ", m is: " << index->metric_type << endl;
    
    long *I = new long[10*1];
    float *D = new float[10 * 1];

    struct timeval start;
    gettimeofday(&start, NULL);
    index->search(1,feature, 10, D, I);
    //sleep(1);
    struct timeval end;
    gettimeofday(&end, NULL);

    double takes = 1000000 * ( end.tv_sec - start.tv_sec ) + end.tv_usec - start.tv_usec;
    std::cout << takes << " us" <<  std::endl;
    //4.error
    //annindex* annindex_ptr = new annindex("/Users/liyong/software/pythoncode/com/tencent/cubeli/ml/faiss/tmp/block_2.index");
}
